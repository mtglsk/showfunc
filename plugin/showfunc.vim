" ShowFunc
function! ShowFunctions()
  if     &filetype ==# 'bash'
    return '\m\C^[\t ]*\(function[\t ]\+\)\?[_a-zA-Z][_a-zA-Z0-9]\+[\t ]*\(([\t ]*)\)\?[\t ]*\n*{'
  elseif &filetype ==# 'c'
    return '^\w.*\s*\w\_[\t ]*('
  elseif &filetype ==# 'clojure'
    return '^[\t ]*(def\(n-\?\)\?[\t ]\+\D.*'
  elseif &filetype ==# 'coffee'
    return '\v\C\w.+\s*\=\s*(-|\=)\>'
  elseif &filetype ==# 'cpp'
    return '\v^%(\w|:).*\s*%(\w|:)\_[\t ]*\('
  elseif &filetype ==# 'cs'
    return '\v^\s+%(<\w+>\s+){0,3}(\w|[<>[\]])+\s+\w+\s*\(\_[^\)]*\)'
  elseif &filetype ==# 'dart'
    return '\v[\t ]*\w+[\t ]+(%(%(get|set)[\t ]+)|\w+[\t ]*\(.*\{)'
  elseif &filetype ==# 'dash'
    return '\m\C^[\t ]*[_a-zA-Z][_a-zA-Z0-9]\+[\t ]*\(([\t ]*)\)\?[\t ]*\n*{'
  elseif &filetype ==# 'elixir'
    return '\m\C^[\t ]*def[\t ]\+\S\+.*do[\t ]*$'
  elseif &filetype ==# 'go'
    return '\m\C^[\t ]*func[\t ]\+'
  elseif &filetype ==# 'html'
    return '\v<id>\='
  elseif &filetype ==# 'java'
    return '\v^\s+%(<\w+>\s+){0,3}(\w|[<>[\]])+\s+\w+\s*\(\_[^\)]*\)(\w|\s?|\{)+$'
  elseif &filetype ==# 'javascript'
    return '\v\s*function(\*\s+|\s+\*\s+|\s+\*)\w+\('
  elseif &filetype ==# 'jinja'
    return '\m\C{%-\?\s*macro\s\+\w\+\s*(.*)\s*-\?%}'
  elseif &filetype ==# 'lua'
    return '\v\s*\w.+\s*\=\s*function\s*\('
  elseif &filetype ==# 'make'
    return '\m^[^:\t#@''"]\+:=\@![^:\t]*\ze\n\|^\s*define\>'
  elseif &filetype ==# 'markdown'
    return '\m\C^#\{1,6}[\t ]\+\S\+'
  elseif &filetype ==# 'objc'
    return '\m\C^\(-\|+\)\s*([a-zA-Z0-9 *]\+)\s*.*'
  elseif &filetype ==# 'perl'
    return '\m\C\(\<sub\%(type\)\?\>\|\<coerce[\t ]\+\w\+\|enum\|[''"]\w\+::\w\+[''"]\)[\t ]*'
  elseif &filetype ==# 'php'
    return '\v^\s*\w*%(\s*\w*)\s*function\s+[&]*(\w+)\s*\(.*$'
  elseif &filetype ==# 'python'
    return '\v\C^\s*(class\s+\w+\s*(\([^\)]+\))?|def\s+\w+\s*(\_.{-})):'
  elseif &filetype ==# 'ruby'
    return '\m\C^[\t ]*def[\t ]\+\(\w\+\)'
  elseif &filetype ==# 'rust'
    return '\m\Cfn[\t ]\+[_a-zA-Z]*'
  elseif &filetype ==# 'scala'
    return '\m\C^[\t ]*\(\w\+\)\?\(\[\w\+\]\)\?[\t ]*def[\t ]\+\S\+'
  elseif &filetype ==# 'scss'
    return '\v^\s*[^{]+\s*\{'
  elseif &filetype ==# 'sh'
    return '\m\C^[\t ]*\(function[\t ]\+\)\?[_a-zA-Z][_a-zA-Z0-9]\+[\t ]*\(([\t ]*)\)\?[\t ]*\n*{'
  elseif &filetype ==# 'tex'
    return '\\\(\(sub\)\{0,2}section\|chapter\|\(sub\)\=paragraph\|part\)\(*\)\={.*}'
  elseif &filetype ==# 'typescript'
    return '\v^[ \t]*(export)?[ \t]*((module)|(class)|(interface)|(enum)|(function))[ \t]+([a-zA-Z0-9_]+)'
  elseif &filetype ==# 'vb'
    return '\v\c^[\t ]*%((Private|Friend|Public)[\t ]+)?(Function|Sub)[\t ]+'
  elseif &filetype ==# 'vim'
    return '\m\C^[\t ]*fu\(n\|nc\|nct\|ncti\|nctio\|nction\)\?!\?[\t ]\+\S\+'
  elseif &filetype ==# 'xhtml'
    return '\v<id>\='
  elseif &filetype ==# 'yaml'
    return '\v\C^\s*.*:'
  elseif &filetype ==# 'zsh'
    return '\m\C^[\t ]*\%(function[\t ]\)\?\%([-/+_a-zA-Z0-9]\+\)\?[\t ]*\%(()\)\?[\t ]*{'
  elseif empty(@%)
    return ''
  endif
endfunction

command! ShowFunc :silent execute 'g/' . ShowFunctions() . '/'
      \| vimgrep // %

command! ShowFuncAll :cexpr [] | silent execute 'g/' . ShowFunctions() . '/'
      \| silent bufdo vimgrepadd // %
